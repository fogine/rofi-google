#!/bin/sh
':' //; exec "$(command -v nodejs || command -v node)" "$0" "$@"


'use strict';

const child_process = require('child_process');
const path          = require('path');
const EventEmitter  = require('events');
const fs            = require('fs');
const https         = require('https')

const APP_NAME = 'rofi-google';
const $HOME = process.env.HOME;
const $XDG_CACHE_HOME = process.env.XDG_CACHE_HOME;
const TITLE_COLOR = process.env.TITLE_COLOR || '#3296c8';
let $GOOGLER_ARGS = process.env.GOOGLER_ARGS || '[]';

const CACHE_DIR_PATH = ($XDG_CACHE_HOME || ($HOME + "/.cache")) + '/' + APP_NAME;
const CACHE_FILE_PATH = `${CACHE_DIR_PATH}/last_search.json`;


if ($GOOGLER_ARGS) {
    try {
        $GOOGLER_ARGS = JSON.parse($GOOGLER_ARGS);
        if (!Array.isArray($GOOGLER_ARGS)) {
            throw new Error('GOOGLER_ARGS env variable is not valid json array');
        }
    } catch(e) {
        console.error('Failed to parse GOOGLER_ARGS env variable.');
        console.error(e);
        process.exit(1);
    }
}

/**
 */
function main() {

    const rofi = new Rofi({
        titleColor: TITLE_COLOR
    });

    const search = new Search({
        apiKey: process.env.GOOG_API_KEY,
        //search engine id
        cx: process.env.GOOG_SEARCH_ID,
        rofi: rofi
    });
    search.on('search-result', function(data) {
        rofi.setData(data);
        rofi.updateListView();
        rofi.updateMessageView();
    });

    //load last search query results
    rofi.setData(search.loadCache())
    rofi.updateListView();
    rofi.updateMessageView();
    //initialize rofi if there is no cached last usage data
    if (rofi.data === null) {
        rofi.write({});
    }

    process.stdin.setEncoding('utf8');
    process.stdin.on('readable', function() {
        let data;

        while (data = this.read()) {

            //console.error(data);
            const messages = data.split('\n');
            messages.forEach(function(message) {
                if (message) {
                    message = JSON.parse(message);
                    this.emit(message.name, message.value);
                }
            }, this);
        }
    });

    process.stdin.on('input change', function(value) {
        search.query(value);
    });


    process.stdin.on('select entry', function(value) {
        const searchResult = rofi.getMatchingRecord(value);
        xdgOpen(searchResult.link);
        process.exit(0);
    });

    process.stdin.on('execute custom input', function(value) {
        xdgOpen(getGoogleSearchUrl(value));
        process.exit(0);
    });

    process.stdin.on('active entry', function(value) {
        this._tempBuffer = value;
    });

    process.stdin.on('custom key', function(value) {
        const selectedEntry = rofi.getMatchingRecord(this._tempBuffer);
        switch (value) {
            //copy to clipboard
            case '1': //-kb-custom-1
                const xclip = child_process.spawn('xclip', ['-l', 1]);
                xclip.on('close', exit);

                xclip.stdin.end(selectedEntry.link);
                break;
            default:
        }
    });
}


/*
 *
 *===========================ROFI IPC=========================
 */

/**
 * @param {Object} config
 * @param {String} config.titleColor
 */
function Rofi(config) {
    this.config = config || {};
    this.data = null; // google search api response object
    this.message = {
        prompt: 'search',
        "input action": "send"
    };
    this.queue = [];
    this.timeoutID = null;
    process.stdout.setDefaultEncoding('utf8');
}


/**
 * @param {Object} data
 * @return {undefined}
 */
Rofi.prototype.setData = function(data) {
    this.data = data;
};


/**
 * getMatchingRecord
 * @param {String} selectedText - rofi formatted entry
 * @return {Object|null}
 */
Rofi.prototype.getMatchingRecord = function(selectedText) {
    if (!this.data || !Array.isArray(this.data.items)) {
        return null;
    }
    for (var i = 0, len = this.message.lines.length; i < len; i++) {
        if (this.message.lines[i].text == selectedText) {
            break;
        }
    }

    return this.data.items[i];
};

/**
 * write
 * @param {Object} data
 */
Rofi.prototype.write = function(data) {
    this.queue.push(data);

    if (this.timeoutID) {
        clearTimeout(this.timeoutID);
    }

    this.timeoutID = setTimeout(() => {
        this.queue.unshift(this.message);
        Object.assign.apply(null, this.queue);

        //console.error(JSON.stringify(this.message));
        process.stdout.write(JSON.stringify(this.message));
        process.stdout.write('\n');
    }, 0);
};

/**
 * @return {undefined}
 */
Rofi.prototype.updateMessageView = function updateMessageView() {
    if (this.data === null) {
        return;
    }

    const context = this.data.searchInformation;
    const message = `<span size="x-small">About ${context.formattedTotalResults} results (${context.formattedSearchTime} seconds)</span>`;

    this.write({message: message});
};

/**
 * @return {undefined}
 */
Rofi.prototype.updateListView = function updateListView() {
    if (this.data === null || !Array.isArray(this.data.items)) {
        return;
    }

    const searchResults = [];
    this.data.items.forEach(function(item, index) {
        let text = '';

        let snippetSegments = item.snippet.replace(/\n/g, '').split('...').filter(trimArr).map(trimStr);
        let snippet = '';

        if (snippetSegments.length == 2) {
            snippet = snippetSegments.join('\n');
        } else if (snippetSegments.length > 2) {
            snippet = snippetSegments[0] + ' ... ' + snippetSegments[1] + '\n';
            snippet += snippetSegments.slice(2).join(' ... ').trim();
        } else if (snippetSegments.length) {
            snippet = snippetSegments[0];
        }

        if (snippet && snippet[snippet.length-1] != '.') {
            snippet += ' ...';
        }

        let link = prettyPrintUrl(escapePangoMarkup(item.link));
        let title = escapePangoMarkup(item.title);
        snippet = escapePangoMarkup(snippet);

        text += '<span size="x-small" rise="10000">' + link + '</span>\n';
        text += `<span color="${this.config.titleColor}" rise="10000">` + title + '</span>\n';
        text += '<span size="x-small">' + snippet + '</span>';
        //console.error(text);

        searchResults.push({
            text: text,
            markup: true
        });
    }, this);

    this.write({lines: searchResults});
};

function escapePangoMarkup(unsafe) {
    return unsafe
         .replace(/&/g, "&amp;")
         .replace(/</g, "&lt;")
         .replace(/>/g, "&gt;")
         .replace(/"/g, "&quot;")
         .replace(/'/g, "&#039;");
 }

function trimStr(str) {
    return str.trim();
}

function trimArr(item) {
    return item !== null && item !== '' && item !== undefined;
}

/**
 * @param {String} url
 * @return {String}
 */
function prettyPrintUrl(url) {
    let prettyUrl = '';
    url.split('/').slice(2).forEach(function(segment, index, arr) {
        if (index == 0) {
            segment = '<b>' + segment + '</b>';
        }
        prettyUrl += segment;
        if (arr[index+1]) {
            prettyUrl += ' â€º ';
        }
    });
    return prettyUrl;
}


/*
 *
 *===========================GOOGLE SEARCH HTTP=========================
 */

/**
 * @param {Object} config
 * @param {String} config.apiKey
 * @param {String} config.cx
 */
function Search(config) {
    this.options = {
        key: config.apiKey,
        cx: config.cx,
    };
    this.timeoutID = null;
}

Search.prototype = Object.create(EventEmitter.prototype);
Search.prototype.constructor = Search;

/**
 * @param {String} q
 */
Search.prototype.query = function query(q) {

    const self = this;
    const options = Object.assign({q}, this.options);

    if (this.timeoutID) {
        clearTimeout(this.timeoutID);
    }

    this.timeoutID = setTimeout(_search, 500);

    async function _search() {
        const data = await self.getSearchResults(options);
        self.emit('search-result', data);
        self.saveCache(data);
    }
}


/**
 * @param {Object} options
 * @return {Promise<Object>}
 */
Search.prototype.getSearchResults = async function(options) {
    if (this.options.key) {
        //use custom google search engine
        return await this.customEngineSearch(options)
    } else {
        //use googler utility
        return await this.googlerSearch(options.q)
    }
};


/**
 * @param {String} q
 * @return {Promise<Object>}
 */
Search.prototype.googlerSearch = function(q) {
    return new Promise(function(resolve, reject) {
        let stdout = '';
        let stderr = '';
        let args = $GOOGLER_ARGS.concat(['--json', `${q}`]);

        const googler = child_process.spawn('googler', args);

        googler.stdout.on('data', function(chunk) {
            stdout += chunk.toString();
        });

        googler.stderr.on('data', function(chunk) {
            stderr += chunk.toString();
        })

        googler.once('close', function(status) {
            if (status !== 0) {
                return reject(stderr);
            }

            let urlBuffer = [];
            stdout = JSON.parse(stdout).map(function(item) {
                //remove duplicates
                if (urlBuffer.includes(item.url)) {
                    return;
                }

                urlBuffer.push(item.url);
                if (item.metadata) {
                    let metadataSegments = item.metadata.split(',');
                    //prepend data information
                    //so its in the same format as search results from google API
                    item.abstract =  metadataSegments[0] + ' ... ' + item.abstract;
                }
                return {
                    link: item.url,
                    snippet: item.abstract,
                    title: item.title
                };
            }).filter(trimArr);

            return resolve({
                searchInformation: {
                  formattedSearchTime: '&lt;unavaible&gt;',
                  formattedTotalResults: '&lt;unavaible&gt;'
                },
                items: stdout
            });
        });

        googler.once('error', function(err) {
            reject(err);
        });
    });
};

/**
 * @param {Object} options
 * @return {Promise}
 */
Search.prototype.customEngineSearch = function(options) {
    return new Promise(function(resolve, reject) {
        let query = '';
        Object.keys(options).forEach(function(prop) {
            query += prop+'='+encodeURIComponent(options[prop])+'&';
        });
        const opt = {
            hostname: 'www.googleapis.com',
            port: 443,
            path: `/customsearch/v1?${query}`,
            method: 'GET',
            headers: {
                'x-goog-api-client': 'gdcl/3.2.2 gl-node/8.16.2 auth/5.10.1',
                Accept: 'application/json',
                //'Accept-Encoding': 'gzip',
                //'User-Agent': 'google-api-nodejs-client/3.2.2 (gzip)',
            }
        }
        let data = '';

        const req = https.request(opt, res => {

            res.on('data', chunk => {
                data += chunk;
            });

            res.on('end', () => {
                //console.error('===============');
                //console.error(`statusCode: ${res.statusCode}`)
                //console.error(data)

                //wierd undefined behavior:
                //when executing this via i3wm shortcut mapping,
                //statusCode is 65535 instead of 200
                if ((res.statusCode >= 200 && res.statusCode < 300)
                    || res.statusCode === 65535
                ) {
                    resolve(JSON.parse(data));
                } else {
                    reject(data);
                }
            });
        });

        req.on('error', error => {
            reject(error);
        });

        req.end();
    });
};

/**
 * @return {undefined}
 */
Search.prototype.saveCache = function saveCache(data) {
    if (!fs.existsSync(CACHE_DIR_PATH)) {
        fs.mkdirSync(CACHE_DIR_PATH);
    }
    fs.writeFileSync(CACHE_FILE_PATH, JSON.stringify(data), 'utf-8');
}

/**
 * @return {Object|null}
 */
Search.prototype.loadCache = function loadCache() {
    if (fs.existsSync(CACHE_FILE_PATH)) {
        return JSON.parse(fs.readFileSync(CACHE_FILE_PATH));
    }

    return null;
}

/*
 *
 *===========================UTILS=========================
 */

/**
 * @param {String} url
 * @return stdout
 */
function xdgOpen(url) {
    const xdgOpen = child_process.spawn('xdg-open', [url]);
    xdgOpen.on('close', exit);
}

function exit() {
    process.exit(0);
}

/**
 * @param {String} q - search query
 * @return {String}
 */
function getGoogleSearchUrl(q) {
    return `https://google.com/search?q=${encodeURIComponent(q)}`;
}

main();
